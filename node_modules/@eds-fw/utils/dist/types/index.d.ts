/**
 * Nicely divides a number into units, tens, hundreds, thousands, etc. Example: `1234567` -> `1 234 567`
 */
export declare function formatNumber(x: number): string;
/**
 * Prints to the console information about the memory usage of the given process.
 */
export declare function reportMemory(): void;
/**
 * Returns pseudo-random number from `min` to `max`
 */
export declare function random(min: number, max: number): number;
/**
 * Returns a random array element
 */
export declare function arrRandom<T>(arr: T[]): T;
/**
 * Returns a random key of the specified object with a chance equal to the value of this key
 *
 * Algorithm: https://github.com/jotson/LootTable.js
 * @param elements object as {"key": chance}
 */
export declare function chanceRandom(elements: Record<string, number>): string;
/**
 * Checks for equality data of primitive and reference types
 */
export declare function equal(v1: any, v2: any): boolean;
/**
 * Fluently compares texts for the presence of the same
 */
export declare function quickTextCompare(text1: string, text2: string): boolean;
/**
 * Checks if an array contains all specified values
 */
export declare function includesAll<T extends any[]>(arr: T, values: T): boolean;
/**
 * Stops code execution for the specified duration
 */
export declare function wait(time_ms: number): Promise<void>;
/**
 * Creates a [deep copy](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy) of an object
 *
 * Supports only serializable objects (JSON-like)
 */
export declare function deepCopy<T extends JSONLikeObj>(source: T): T;
export declare namespace VersionBits {
    const zeroVersion: number[];
    const delimiter = ".";
    function from(input: string): number[];
    function sum(version: number[], to_add: number[]): void;
    function toString(version: number[]): string;
    /**
     * @param majority `0` is 'patch', `1` is 'minor', `2` is 'major'
     */
    function increase(version: number[], count: number, majority: number): void;
}
/**
 * When the number of elements reaches the limit, the `PacketBuffer` is drained
 */
export declare class PacketBuffer<T> implements Disposable {
    #private;
    private drain_callback;
    private limit;
    private auto_drain;
    private stack;
    constructor(drain_callback: (items: T[]) => unknown, limit: number, auto_drain?: boolean);
    /**
     * Number of elements for all time
     */
    get total_elements_count(): number;
    put(item: T): void;
    forceDrain(): Promise<void>;
    private _check_limit;
    [Symbol.dispose](): void;
}
/**
 * Splits `[0,1,2,3,4,5,6,7,8,9]` to `[[0,1,2], [3,4,5], [6,7,8], [9]]` (if portionSize=3)
 */
export declare function splitIntoPortions<T>(arr: T[], portionSize: number): T[][];
/**
 * Expands the tree of the specified folder
 */
export declare function expandDir(dir_path: string): string[];
type SerializableTypes = string | number | boolean | object | null;
export type JSONSupported = SerializableTypes | SerializableTypes[];
export type JSONLikeObj = Record<string, JSONSupported>;
export {};
